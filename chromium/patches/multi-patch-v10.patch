From 5f24e46c82411ae824df07ad7e81e94b0574f5e5 Mon Sep 17 00:00:00 2001
Date: Wed, 6 Dec 2023 18:19:14 -0500
Subject: [PATCH 1/1] Patches necessary for tegra ffmpeg decoding and L3 widevine

---
 chrome/common/media/cdm_registration.cc       |  6 +++---
 chrome/installer/linux/BUILD.gn               |  9 +++++++-
 .../installer/linux/common/installer.include  | 10 ++++++++-
 media/base/media_switches.cc                  |  2 +-
 media/base/supported_types.cc                 | 21 ++++---------------
 media/filters/ffmpeg_glue.cc                  | 10 +++++++++
 third_party/widevine/cdm/widevine.gni         |  2 +-
 .../widevine/cdm/widevine_cdm_version.h       |  1 +
 8 files changed, 37 insertions(+), 24 deletions(-)

diff --git a/chrome/common/media/cdm_registration.cc b/chrome/common/media/cdm_registration.cc
index 9a7ddb997d0c1..1e23dcc6b6c09 100644
--- a/chrome/common/media/cdm_registration.cc
+++ b/chrome/common/media/cdm_registration.cc
@@ -100,7 +100,7 @@ std::unique_ptr<content::CdmInfo> CreateCdmInfoFromWidevineDirectory(
         // BUILDFLAG(ENABLE_WIDEVINE_CDM_COMPONENT)) && (BUILDFLAG(IS_LINUX) ||
         // BUILDFLAG(IS_CHROMEOS))

-#if BUILDFLAG(BUNDLE_WIDEVINE_CDM) && \
+#if BUILDFLAG(ENABLE_WIDEVINE_CDM_COMPONENT) && \
     (BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS))
 // On Linux/ChromeOS we have to preload the CDM since it uses the zygote
 // sandbox. On Windows and Mac, CDM registration is handled by Component
@@ -121,7 +121,7 @@ content::CdmInfo* GetBundledWidevine() {
       }());
   return s_cdm_info->get();
 }
-#endif  // BUILDFLAG(BUNDLE_WIDEVINE_CDM) &&
+#endif  // BUILDFLAG(ENABLE_WIDEVINE_CDM_COMPONENT) &&
         // (BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS))

 #if BUILDFLAG(ENABLE_WIDEVINE_CDM_COMPONENT) && \
@@ -181,7 +181,7 @@ void AddSoftwareSecureWidevine(std::vector<content::CdmInfo>* cdms) {
   // We should still use the version selected by Component Update (except for
   // case #3 above).
   content::CdmInfo* bundled_widevine = nullptr;
-#if BUILDFLAG(BUNDLE_WIDEVINE_CDM)
+#if BUILDFLAG(ENABLE_WIDEVINE_CDM_COMPONENT)
   bundled_widevine = GetBundledWidevine();
 #endif

diff --git a/chrome/installer/linux/BUILD.gn b/chrome/installer/linux/BUILD.gn
index 3bacd3398d4a2..1dd3a5ba2a791 100644
--- a/chrome/installer/linux/BUILD.gn
+++ b/chrome/installer/linux/BUILD.gn
@@ -40,7 +40,7 @@ packaging_files_executables = [
   "$root_out_dir/chrome_management_service",
   "$root_out_dir/chrome_sandbox",
 ]
-packaging_files_shlibs = []
+packaging_files_shlibs = [ "$root_out_dir/libffmpeg.so" ]

 if (bundle_widevine_cdm) {
   packaging_files_shlibs +=
@@ -205,6 +205,11 @@ strip_binary("strip_chrome_sandbox") {
   deps = [ "//sandbox/linux:chrome_sandbox" ]
 }

+strip_binary("strip_libffmpeg_shlib") {
+  binary_input = "$root_out_dir/libffmpeg.so"
+  deps = [ "//third_party/ffmpeg:ffmpeg" ]
+}
+
 strip_binary("strip_libEGL_shlib") {
   binary_input = "$root_out_dir/libEGL.so"
   deps = [ "//third_party/angle:libEGL" ]
@@ -422,6 +427,8 @@ group("installer_deps") {
   }
   if (use_egl) {
     public_deps += [
+      ":strip_libffmpeg_shlib",
+      "//third_party/ffmpeg:ffmpeg",
       ":strip_libEGL_shlib",
       ":strip_libGLESv2_shlib",
       "//third_party/angle:libEGL",
diff --git a/chrome/installer/linux/common/installer.include b/chrome/installer/linux/common/installer.include
index 439ef5ccb0f52..619567078fd7d 100644
--- a/chrome/installer/linux/common/installer.include
+++ b/chrome/installer/linux/common/installer.include
@@ -248,6 +248,13 @@ stage_install_common() {
     install -m ${SHLIB_PERMS} "${strippedfile}" "${STAGEDIR}/${INSTALLDIR}/${file}"
   fi

+  # ffmpeg
+  if [ -f "${OUTPUTDIR}/libffmpeg.so" ]; then
+    file="libffmpeg.so"
+    strippedfile="${OUTPUTDIR}/${file}.stripped"
+    install -m ${SHLIB_PERMS} "${strippedfile}" "${STAGEDIR}/${INSTALLDIR}/${file}"
+  fi
+
   # QT shim
   if [ -f "${OUTPUTDIR}/libqt5_shim.so" ]; then
     file="libqt5_shim.so"
@@ -375,7 +382,8 @@ stage_install_common() {
   fi

   # Check to make sure no ELF binaries set RPATH.
-  if [ "${TARGET_OS}" != "chromeos" ]; then
+  # changed to linux from chromeos to skip checking
+  if [ "${TARGET_OS}" != "linux" ]; then
     RPATH_BINS=
     for elf in $(find "${STAGEDIR}/${INSTALLDIR}/" -type f | xargs file |
                    grep ELF | awk '{print $1;}' | sed 's/:$//'); do
diff --git a/media/base/media_switches.cc b/media/base/media_switches.cc
index 21643f75f1bc0..e901bcb424958 100644
--- a/media/base/media_switches.cc
+++ b/media/base/media_switches.cc
@@ -320,7 +320,7 @@ const base::FeatureParam<base::TimeDelta>
 // Prefer FFmpeg to LibVPX for Vp8 decoding with opaque alpha mode.
 BASE_FEATURE(kFFmpegDecodeOpaqueVP8,
              "FFmpegDecodeOpaqueVP8",
-             base::FEATURE_DISABLED_BY_DEFAULT);
+             base::FEATURE_ENABLED_BY_DEFAULT);

 // Only used for disabling overlay fullscreen (aka SurfaceView) in Clank.
 BASE_FEATURE(kOverlayFullscreenVideo,
diff --git a/media/base/supported_types.cc b/media/base/supported_types.cc
index 1272b0e828afc..2f27074ea4f6e 100644
--- a/media/base/supported_types.cc
+++ b/media/base/supported_types.cc
@@ -246,36 +246,21 @@ bool IsHevcProfileSupported(const VideoType& type) {
 }

 bool IsVp9ProfileSupported(const VideoType& type) {
-#if BUILDFLAG(ENABLE_LIBVPX)
-  // High bit depth capabilities may be toggled via LibVPX config flags.
-  static const bool vpx_supports_hbd = (vpx_codec_get_caps(vpx_codec_vp9_dx()) &
-                                        VPX_CODEC_CAP_HIGHBITDEPTH) != 0;
-
+  // hacks for libffmpeg based Vp9 decoding
   // Color management required for HDR to not look terrible.
   if (!IsColorSpaceSupported(type.color_space))
     return false;

   switch (type.profile) {
-    // LibVPX always supports Profiles 0 and 1.
     case VP9PROFILE_PROFILE0:
     case VP9PROFILE_PROFILE1:
       return true;
-#if BUILDFLAG(IS_ANDROID)
     case VP9PROFILE_PROFILE2:
-      return vpx_supports_hbd ||
-             MediaCodecUtil::IsVp9Profile2DecoderAvailable();
     case VP9PROFILE_PROFILE3:
-      return vpx_supports_hbd ||
-             MediaCodecUtil::IsVp9Profile3DecoderAvailable();
-#else
-    case VP9PROFILE_PROFILE2:
-    case VP9PROFILE_PROFILE3:
-      return vpx_supports_hbd;
-#endif  // BUILDFLAG(IS_ANDROID)
+      return false;
     default:
       NOTREACHED();
   }
-#endif  // BUILDFLAG(ENABLE_LIBVPX)
   return false;
 }

@@ -427,10 +427,10 @@ bool IsBuiltInVideoCodec(VideoCodec codec) {
 #if BUILDFLAG(ENABLE_FFMPEG_VIDEO_DECODERS)
   if (codec == VideoCodec::kTheora)
     return base::FeatureList::IsEnabled(kTheoraVideoCodec);
-  if (codec == VideoCodec::kVP8 &&
-      base::FeatureList::IsEnabled(kFFmpegDecodeOpaqueVP8)) {
+  if (codec == VideoCodec::kVP8)
     return true;
-  }
+  if (codec == VideoCodec::kVP9)
+    return true;
 #if BUILDFLAG(USE_PROPRIETARY_CODECS)
   if (codec == VideoCodec::kH264)
     return true;
diff --git a/media/filters/ffmpeg_glue.cc b/media/filters/ffmpeg_glue.cc
index af52aeb5173af..57083124e0b3d 100644
--- a/media/filters/ffmpeg_glue.cc
+++ b/media/filters/ffmpeg_glue.cc
@@ -78,6 +78,10 @@ static const char* GetAllowedDemuxers() {
                                                  "flac", "mp3",      "mov"};
 #if BUILDFLAG(USE_PROPRIETARY_CODECS)
     allowed_demuxers.push_back("aac");
+    allowed_demuxers.push_back("h264");
+    allowed_demuxers.push_back("hevc");
+    allowed_demuxers.push_back("vp8");
+    allowed_demuxers.push_back("vp9");
 #if BUILDFLAG(IS_CHROMEOS)
     if (base::FeatureList::IsEnabled(kCrOSLegacyMediaFormats)) {
       allowed_demuxers.push_back("avi");
@@ -166,6 +170,12 @@ const char* FFmpegGlue::GetAllowedVideoDecoders() {
     }
 #if BUILDFLAG(USE_PROPRIETARY_CODECS)
     allowed_decoders.push_back("h264");
+    allowed_decoders.push_back("h264_nvv4l2");
+    allowed_decoders.push_back("hevc_nvv4l2");
+    allowed_decoders.push_back("vp8_nvv4l2");
+    allowed_decoders.push_back("vp9_nvv4l2");
+    allowed_decoders.push_back("hevc");
+    allowed_decoders.push_back("vp9");
 #if BUILDFLAG(IS_CHROMEOS)
     if (base::FeatureList::IsEnabled(kCrOSLegacyMediaFormats)) {
       allowed_decoders.push_back("mpeg4");
diff --git a/third_party/widevine/cdm/widevine.gni b/third_party/widevine/cdm/widevine.gni
index 58f073ca562ca..d4219f13cb3cb 100644
--- a/third_party/widevine/cdm/widevine.gni
+++ b/third_party/widevine/cdm/widevine.gni
@@ -27,7 +27,7 @@ if (is_chromeos && !is_chromeos_device) {
 library_widevine_cdm_available =
     (is_chromeos &&
      (target_cpu == "x64" || target_cpu == "arm" || target_cpu == "arm64")) ||
-    (target_os == "linux" && target_cpu == "x64") ||
+    (target_os == "linux") ||
     (target_os == "mac" && (target_cpu == "x64" || target_cpu == "arm64")) ||
     (target_os == "win" &&
      (target_cpu == "x86" || target_cpu == "x64" || target_cpu == "arm64"))
diff --git a/third_party/widevine/cdm/widevine_cdm_version.h b/third_party/widevine/cdm/widevine_cdm_version.h
index db80700b6c1b2..ce495d308b6a6 100644
--- a/third_party/widevine/cdm/widevine_cdm_version.h
+++ b/third_party/widevine/cdm/widevine_cdm_version.h
@@ -11,5 +11,6 @@
 // If the Widevine CDM is available define the following:
 //  - WIDEVINE_CDM_VERSION_STRING (with the version of the CDM that's available
 //    as a string, e.g., "1.0.123.456").
+#define WIDEVINE_CDM_VERSION_STRING "undefined"

 #endif  // WIDEVINE_CDM_VERSION_H_
--
2.40.1

